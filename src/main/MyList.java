package main;

import java.util.Comparator;

/**
 * Это упорядоченный набор объектов, каждый элемент которого занимает определенную позицию в списке.
 * Он обычно используется, когда вам нужно поддерживать порядок элементов в коллекции или когда вам нужно получить
 * доступ к элементам по их индексу в списке.
 * @param <T> - тип элементов в данном списке.
 */
public interface MyList<T> {

    /**
     * Добавляет указанный элемент в конец этого списка
     * @param e - элемент, который будет добавлен к данному списку.
     * @return возвращает true, если эта коллекция изменилась в результате вызова.
     */
    boolean add(T e);

    /**
     * Возвращает элемент в указанной позиции в этом списке.
     * @param index - индекс возвращаемого элемента.
     * @return возвращает элемент в указанной позиции в этом списке.
     */
    T get(int index);

    /**
     * Удаляет элемент из списка по указанному индексу.
     * @param index - индекс элемента, который нужно удалить из этого списка, если он присутствует.
     * @return возвращает true, если этот список содержит элемент с указанным индексом.
     */
    boolean remove(int index);

    /**
     * Удаляет все элементы из этого списка. Список будет пуст после возврата этого вызова.
     */
    void clear();


    /**
     * Сортирует этот список в соответствии с порядком, заданным указанным Comparator.
     * @param c - Comparator, используемый для сравнения элементов списка.
     */
    void sort(Comparator<? super T> c);

    /**
     * Вставляет указанный элемент в указанную позицию в этом списке. Сдвигает элемент, находящийся в данный момент
     * в этой позиции (если есть), и любые последующие элементы вправо (добавляет единицу к их индексам).
     * @param index - индекс, по которому указанный элемент должен быть вставлен.
     * @param element - элемент, который будет добавлен к данному списку.
     */
    void add(int index, T element);

    /**
     * Возвращает количество элементов в этом списке. Если этот список содержит больше элементов, чем Integer.MAX_VALUE,
     * то возвращает Integer.MAX_VALUE .
     * @return возвращает количество элементов в этом списке
     */
    int size();

    /**
     * Возвращает true если этот список не содержит элементов.
     * @return возвращает true если этот список не содержит элементов.
     */
    boolean isEmpty();
}
